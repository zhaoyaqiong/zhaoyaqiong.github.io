<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[仿Github Contributions实现]]></title>
    <url>%2F2019%2F09%2F15%2F%E4%BB%BFGitHubContributions%2F</url>
    <content type="text"><![CDATA[前言Github Contributions 是我使用Github的乐趣之一，最近因为遇到了一个类似的需求，所以想着自己模仿着做一个。 通过搜索，网上已经有一些实现，但是因为时间久远的原因，使用的好多第三方库的函数已经被移除。 一步一步将 d3.js Calendar View 转变成 GitHub Contributions By alphahinex How to recreate GitHub’s contribution graph By Vincent Le 本文就将参照两位前辈的博文，进行一些改进。 准备 简单的 HTML 和 CSS （因为只是简单的实现 javascript 以及d3.js。d3是javascript的一个库，全称（Data-Driven Documents）主要用来做数据可视化。 开始创建contributions.html文件，引入d3.js，页面的基本样式。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.12.0/d3.min.js"&gt;&lt;/script&gt; &lt;style type="text/css"&gt; body&#123; font-size: 10px; &#125; /* 之后的样式写在这里 */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; // 之后我们的逻辑代码都会在这里实现&lt;/script&gt;&lt;/html&gt; 我们之后的css样式会在style里，js代码会在下面的script标签中。 这里，参考Github Contributions的样子。我们定义了Contributions的大小，小的单元格的尺寸，以及默认的填充颜色。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546let height = 300, width = 1386, cellSize = 16;let format = d3.timeFormat("%Y-%m-%d");let svg = d3.select("body") .append("svg").attr("width", width).attr("height", height).attr("class", "cv") .append("g").attr("transform", "translate(" + ((width - cellSize * 53) / 2) + "," + (height - cellSize * 7)/2 + ")"); svg.append('text').attr('transform', 'translate(-30,' + cellSize * 1.8 + ')').attr('fill','#767676').text('周一'); svg.append('text').attr('transform', 'translate(-30,' + cellSize * 3.8 + ')').attr('fill','#767676').text('周三'); svg.append('text').attr('transform', 'translate(-30,' + cellSize * 5.8 + ')').attr('fill','#767676').text('周五');let now = new Date();let lastYear = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);let weekOfYear = 53 - d3.timeWeek.count(d3.timeYear(lastYear), lastYear);function transformWeek(d)&#123; let year = d.getFullYear(); let thisYear = now.getFullYear(); let weekCount = d3.timeWeek.count(d3.timeYear(d), d); if (year &lt; thisYear)&#123; weekCount = weekCount - 53 + weekOfYear; &#125;else&#123; weekCount += weekOfYear - 1; &#125; return weekCount&#125;let startYear = lastYear.getFullYear();let startMonth = lastYear.getDate() === 1 ? lastYear.getMonth() : lastYear.getMonth() + 1;for (let i = 0; i &lt; 12; i++) &#123; let s = new Date(startYear, startMonth + i, 1); let w = transformWeek(s) + (s.getDay() &gt; 0 ? 1 : 0); if (w &gt; 52) &#123; break; &#125; let m = s.getMonth() + 1; let l = m &gt; 9 ? m : '0' + m; svg.append('text').attr('transform', 'translate(' + cellSize * w + ', -10)').attr('fill','#767676').text(l);&#125;let rect = svg.selectAll(".day") .data(d3.timeDays(lastYear, now)) .enter().append("rect") .attr("class", "day") .attr("width", cellSize) .attr("height", cellSize) .attr("x", function(d) &#123; return transformWeek(d) * cellSize; &#125;) .attr("y", function(d) &#123; return d.getDay() * cellSize; &#125;) .attr("data-count", 0) .attr("data-date", function(d) &#123; return format(d)&#125;) .attr("fill","#ebedf0") .datum(format); 需要注意的是，在alphahinex前辈的博文中，使用到几个函数，d3.js已经移除。我在自己的实现中也进行了相应的替换。 d3.time.weekOfYear(d) -&gt; d3.timeWeek.count(d3.timeYear(d), d) d3.time.days(time1, time2)-&gt;d3.timeDays(time1, time2) d3.time.format(&quot;%Y-%m-%d&quot;)-&gt;d3.timeFormat(%Y-%m-%d) 上述代码完成后，基本的形状已经大致出来了 但是，单元格都连成一片，我们需要添加样式，将单元格进行一定的区分。 12345678910.day &#123; width: 13px; height: 13px;&#125;.day:hover &#123; stroke-width: 1px; stroke: #f4a460; stroke-linecap: round; vector-effect: non-scaling-stroke;&#125; 现在，样子已经和Github Contributions基本一致了，我们需要对单元格进行染色了。 在我们的js代码下继续添加 1234567891011let data = &#123; '2019-08-31': 1,'2019-09-01': 2,'2019-09-02': 3,'2019-09-03': 4,'2019-09-04': 5, '2019-09-05': 5,'2019-09-06': 6,'2019-09-07': 7,'2019-09-08': 8,'2019-09-09': 9, '2019-09-10': 11,'2019-09-11': 12,'2019-09-12': 13&#125;let colorMap = &#123; 1: '#c6e48b', 2: '#7bc96f', 3: '#239a3b', 4: '#196127'&#125; 模拟出了十几天的数据，同时，我也在github上，对于几种颜色进行了提取。 我们需要定义一个Contributions到颜色的转换 1let transformColor = d3.scaleQuantize().domain([1, 13]).range(d3.range(1,5).map(function(d) &#123; return colorMap[d]; &#125;)); 同时，这里的d3.scaleQuantize 也是d3版本之前d3.scale.quantize()的替换。 在对颜色进行了线性转换后，我们就需要操作单元格，进行填充了。 123456rect.filter(function(d) &#123; return d in data; &#125;) .attr("data-count", function(d) &#123; return data[d]&#125;) .attr("fill", function(d) &#123; return transformColor(data[d])&#125;) .append("title").text(function (d) &#123;return data[d] + ' contributions on ' + d&#125;)rect.filter(function(d) &#123; return !(d in data); &#125;) .append("title").text(function (d) &#123;return 'No contributions on ' + d&#125;) 在填充过后，还对单元格进行了一个鼠标悬浮的文字显示的操作。对于没有数据的单元格，也统一进行了操作。至此，一个仿Github Contributions的小玩意终于也完成了。 忘了图 补一个效果图： 后记d3.js 作为一个强大的数据可视化的库，值得深入学习一下。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>d3</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF入坑]]></title>
    <url>%2F2019%2F09%2F05%2FCTF%E5%85%A5%E5%9D%91%2F</url>
    <content type="text"><![CDATA[CTF入坑一直对网络安全比较感兴趣，但是大学期间没怎么研究过。这次机缘巧合下，决心下功夫研究研究，万一之后转了安全方面呢。 开一个Blog记录一下踩坑，踩雷的历程吧。希望多年后的我看见当初这篇博客能够漏出一个比较开心的笑容吧。 在网上看了好多资源，好多都是推荐ctf-wiki的。进去翻了翻，大致了解了一下。准备先根据wiki所推荐的学习平台，了解一下大致的方向，毕竟自己本科也是计算机系的学生，很多内容应该是有重叠的。 发现wiki中给出了几个CTF OJ。因为自己有ACM竞赛的经验，所以，从刷题开始吧。 在wiki中找到 https://cgctf.nuptsast.com/challenges 他们的about页面挂了，也不太清楚是谁在维护。 关于视频课程，现在看到 i春秋 里面好像还挺多的，先看看吧。如果质量一般的话，再换适合自己的。 嗯，目前计划是一边刷题然后根据刷题给的反馈来补充自己的知识吧。应该是两条路径下来，一边是刷题的过程和思考，一边是对于所遗漏的知识的学习。]]></content>
      <categories>
        <category>CTF入坑之路</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
